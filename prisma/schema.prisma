generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id              Int              @id @default(autoincrement())
  name            String
  logoUrl         String?
  admin           Admin?           @relation("CityAdmin")
  fixedPrayerTime FixedPrayerTime?
  Mosque          Mosque[]
  prayers         Prayer[]
}

model Prayer {
  id       Int     @id @default(autoincrement())
  cityId   Int
  mosqueId Int?
  date     String?
  fajr     String?
  shuruk   String?
  zuhr     String?
  asr      String?
  maghrib  String?
  isha     String?
  mechet   String?
  city     City    @relation(fields: [cityId], references: [id])
  mosque   Mosque? @relation(fields: [mosqueId], references: [id])
  changes  PrayerTimeChange[]
}

model Mosque {
  id      Int      @id @default(autoincrement())
  cityId  Int
  name    String
  logoUrl String?
  media   Media[]
  city    City     @relation(fields: [cityId], references: [id])
  prayers Prayer[]
  qrCodes QRCode[] @relation("MosqueQRCode")
}

model Media {
  id       Int     @id @default(autoincrement())
  mosqueId Int
  videoUrl String?
  mosque   Mosque  @relation(fields: [mosqueId], references: [id])
}

model QRCode {
  id          Int      @id @default(autoincrement())
  mosqueId    Int
  isPrimary   Boolean  @default(true)
  projectName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String
  mosque      Mosque   @relation("MosqueQRCode", fields: [mosqueId], references: [id])
}

model ErrorMessage {
  id      Int    @id @default(autoincrement())
  message String
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Role
  cityId    Int?     @unique
  city      City?    @relation("CityAdmin", fields: [cityId], references: [id])
  prayerChanges PrayerTimeChange[]
  auditLogs AuditLog[]
}

model FixedPrayerTime {
  id            Int      @id @default(autoincrement())
  cityId        Int      @unique
  fajr          String
  shuruk        String
  zuhr          String
  asr           String
  maghrib       String
  isha          String
  mechet        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  fajrActive    Boolean  @default(false)
  shurukActive  Boolean  @default(false)
  zuhrActive    Boolean  @default(false)
  asrActive     Boolean  @default(false)
  maghribActive Boolean  @default(false)
  ishaActive    Boolean  @default(false)
  mechetActive  Boolean  @default(false)
  city          City     @relation(fields: [cityId], references: [id])
}

model PrayerTimeChange {
  id        Int      @id @default(autoincrement())
  prayerId  Int
  prayer    Prayer   @relation(fields: [prayerId], references: [id])
  prayerType String  // тип намаза (fajr, zuhr и т.д.)
  oldTime   String
  newTime   String
  shiftMinutes Int   // на сколько минут изменилось время
  changedAt DateTime @default(now())
  changedBy Int
  user      Admin    @relation(fields: [changedBy], references: [id])
}

enum Role {
  SUPER_ADMIN
  CITY_ADMIN
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Admin    @relation(fields: [userId], references: [id])
  action    String   // create, update, delete
  entity    String   // имя сущности (например, Prayer, City)
  entityId  Int      // ID сущности
  oldValue  Json?
  newValue  Json?
  createdAt DateTime @default(now())
}
